name: Check Release

on:
  push:
    branches:
    - 'r/[0-9]+.[0-9]+.[0-9]+'
    - 'r/[0-9]+.[0-9]+.[0-9]+-[0-9a-zA-Z]+'

jobs:
  check-version:
    name: check-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Get the release version from the branch
      if: env.VERSION == ''
      run: |
        VERSION=${{ github.ref_name }}
        VERSION=${VERSION##r/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - name: Show the version
      run: |
        echo "version is: $VERSION"
    - name: Check that tag version and Cargo.toml version are the same
      shell: bash
      run: |
        if ! grep -q "version = \"$VERSION\"" Cargo.toml; then
          echo "version does not match Cargo.toml" >&2
          exit 1
        fi
    outputs:
      version: ${{ env.VERSION }}

  check-release:
    name: check-release
    needs: ['check-version']
    runs-on: ${{ matrix.os }}
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [linux, macos] #, windows
        include:
        - build: linux
          os: ubuntu-latest
        - build: macos
          os: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download libzim
      run: |
        if [[ "${{ matrix.build }}" == "linux" ]]
        then
          ARCH="x86_64"
          ARCH_POST="/x86_64-linux-gnu"
          LIBZIM_NAME="libzim.so.9"
        else
          ARCH="arm64"
          ARCH_POST=""
          LIBZIM_NAME="libzim.9.dylib"
        fi
        VERSION="9.2.1"
        ARCHIVE_NAME="libzim_${{ matrix.build }}-${ARCH}-${VERSION}"
        wget "https://download.openzim.org/release/libzim/${ARCHIVE_NAME}.tar.gz"
        tar xf ${ARCHIVE_NAME}.tar.gz
        ARCHIVE_PATH=$(pwd)/${ARCHIVE_NAME}
        LIBZIM_LIB=${ARCHIVE_PATH}/lib${ARCH_POST}
        echo "LIBZIM_NAME=$LIBZIM_NAME" >> $GITHUB_ENV
        echo "LIBZIM_LIB=$LIBZIM_LIB" >> $GITHUB_ENV
        echo "LIBZIM_INCLUDE=${ARCHIVE_PATH}/include" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=${LIBZIM_LIB}:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

    - name: Build release binary
      shell: bash
      run: |
        cargo build --verbose --release
        bin="target/release/zim2waj"
        echo "BIN=$bin" >> $GITHUB_ENV

    - name: Strip release binary (macos)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: strip "$BIN"

    - name: Determine archive name
      shell: bash
      run: |
        version="${{ needs.create-release.outputs.version }}"
        echo "ARCHIVE=zim2waj-$version-${{ matrix.build }}" >> $GITHUB_ENV

    - name: Creating directory for archive
      shell: bash
      run: |
        mkdir -p "$ARCHIVE"/{complete,doc}
        cp "$BIN" "$ARCHIVE"/
        cp "${LIBZIM_LIB}/${LIBZIM_NAME}" "$ARCHIVE/"
        cp {README.md,LICENSE-MIT} "$ARCHIVE"/
        cp Changelog.md "$ARCHIVE"/doc/

    - name: Build archive (Unix)
      shell: bash
      run: |
        tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
        shasum -a 256 "$ARCHIVE.tar.gz" > "$ARCHIVE.tar.gz.sha256"
        echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV
        echo "ASSET_SUM=$ARCHIVE.tar.gz.sha256" >> $GITHUB_ENV

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pre_release-zim2waj-${{ matrix.build }}
        path: |
          ${{ env.ASSET }}
        compression-level: 0

  check-publication:
    name: Check cargo publication
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test Publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        cargo publish --dry-run -p zim2waj
